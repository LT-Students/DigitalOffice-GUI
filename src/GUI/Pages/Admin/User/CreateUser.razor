@using System.Threading.Tasks;
@using LT.DigitalOffice.GUI.Services.Interfaces;
@using LT.DigitalOffice.GUI.Services.Client.UserService;
@using LT.DigitalOffice.GUI.Services.Client.Company;

@inject IUserService userService
@inject ICompanyService companyService

<div class="create-user_container">
    <div class="create-user_personal-container">
        <label for="create-user_first-name">
            First name*
            <input @bind-value="userData.FirstName"
                   type="text"
                   id="create-user_first-name"
                   class="form-control"
                   placeholder="Enter first name"
                   @onkeyup="@((k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   lastNameInput.FocusAsync();})" />
        </label>
        <label for="create-user_last-name">
            Last name*
            <input @bind-value="userData.LastName"
                   @ref="lastNameInput"
                   type="text"
                   id="create-user_last-name"
                   class="form-control"
                   placeholder="Enter last name"
                   @onkeyup="@((k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   middleNameInput.FocusAsync();})" />
        </label>
        <label for="create-user_middle-name">
            Middle name*
            <input @bind-value="userData.MiddleName"
                   @ref="middleNameInput"
                   type="text"
                   id="create-user_middle-name"
                   class="form-control"
                   placeholder="Enter middle name"
                   @onkeyup="@((k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   emailInput.FocusAsync();})" />
        </label>
        <label for="create-user_email">
            E-mail*
            <input @bind-value="userCommunication.Value"
                   @ref="emailInput"
                   type="email"
                   id="create-user_email"
                   class="form-control"
                   placeholder="Enter e-mail"
                   @onkeyup="@((k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   passwordInput.FocusAsync();})" />
        </label>
        <label for="create-user_password">
            Password*
            <input @bind-value="userData.Password"
                   @ref="passwordInput"
                   type="password"
                   id="create-user_password"
                   class="form-control"
                   placeholder="Enter password"
                   @onkeyup="@((k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   startWorkingAtInput.FocusAsync();})" />
        </label>
        <label for="create-user_is-admin">
            <input @bind-value="userData.IsAdmin"
                   type="checkbox"
                   class="btn btn-outline-primary" />
            Is admin
        </label>
    </div>

    <div class="create-user_service-container">
        <label for="create-user_start-working-at">
            Start working at*
            <select @bind="userData.StartWorkingAt"
                    @ref="startWorkingAtInput"
                    id="create-user_start-working-at"
                    class="form-select"
                    @onkeyup="@((k) => {
                               if (k.Code == "ArrowDown")
                                   rateInput.FocusAsync();})">
                <option value="@DateTime.UtcNow" selected>today</option>
            </select>
        </label>
        <label for="create-user_rate">
            Rate*
            <select @bind="userData.Rate"
                    @ref="rateInput"
                    id="create-user_rate"
                    class="form-select"
                    @onkeyup="@((k) => {
                               if (k.Code == "ArrowDown")
                                   departmentInput.FocusAsync();})">
                <option selected value="0.25">0.25</option>
                <option value="0.5">0.5</option>
                <option value="0.75">0.75</option>
            </select>
        </label>
        <label for="create-user_department">
            Department
            <select @bind="userData.DepartmentId"
                    @ref="departmentInput"
                    id="create-user_department"
                    class="form-select"
                    @onkeyup="@((k) => {
                               if (k.Code == "ArrowDown")
                                   positionInput.FocusAsync();})">
                <option value="null" selected>Not selected...</option>
            </select>
        </label>
        <label for="create-user_position">
            Position
            <select @bind="userData.PositionId"
                    @ref="positionInput"
                    id="create-user_position"
                    class="form-select"
                    @onkeyup="@((k) => {
                               if (k.Code == "ArrowDown")
                                   statusInput.FocusAsync();})">
                <option value="null" selected>Not selected...</option>
                @if (positions != null)
                {
                    foreach (var position in positions)
                    {
                        <option value="@position.Info.Id">@position.Info.Name</option>
                    }
                }
            </select>
        </label>
        <label for="create-user_status">
            Status
            <select @bind="userData.Status"
                    @ref="statusInput"
                    id="create-user_status"
                    class="form-select">
                <option value="WorkFromHome" selected>WorkFromHome</option>
                <option value="WorkFromOffice">WorkFromOffice</option>
                <option value="Vacation">Vacation</option>
                <option value="Sick">Sick</option>
            </select>
        </label>
    </div>

    <div class="create-user_actions-container">
        <p>@message</p>
        <button class="btn btn-primary" @onclick="@Post">Create user</button>
    </div>
</div>

@code {
    private CreateUserRequest userData = new();
    private CommunicationInfo userCommunication = new();
    private ICollection<PositionResponse> positions;
    public string message;
    private ElementReference lastNameInput;
    private ElementReference middleNameInput;
    private ElementReference startWorkingAtInput;
    private ElementReference departmentInput;
    private ElementReference statusInput;
    private ElementReference positionInput;
    private ElementReference rateInput;
    private ElementReference isAdminInput;
    private ElementReference emailInput;
    private ElementReference passwordInput;

    private async Task Post()
    {
        userCommunication.Type = CommunicationType.Email;
        userData.Communications = new List<CommunicationInfo>();
        userData.Communications.Add(userCommunication);
        message = await userService.CreateUser(userData);
    }

    protected async override void OnInitialized()
    {
        positions = await companyService.FindPosition();
        StateHasChanged();
    }
}



