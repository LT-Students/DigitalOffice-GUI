@using System.Threading.Tasks;
@using LT.DigitalOffice.GUI.Services.Interfaces;
@using LT.DigitalOffice.GUI.Services.ApiClients.UserService;
@using LT.DigitalOffice.GUI.Services.ApiClients.CompanyService;
@using LT.DigitalOffice.GUI.Properties;

@inject IUserService userService
@inject ICompanyService companyService

<EditForm Model="@_userData" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="create-user_container">
        <div class="create-user_personal-container">
            <div class="item-group">
                <label for="create-user_first-name">@Resources.FirstName<font color="red">*</font></label>
                <input @bind-value="_userData.FirstName"
                       type="text"
                       id="create-user_first-name"
                       class="form-control"
                       @onkeyup="@((k) => {
                                   if (k.Code == "Enter" || k.Code == "ArrowDown")
                                       _lastNameInput.FocusAsync();})" />
                <ValidationMessage style="font-size: 0.7em;" For="() => _userData.FirstName" />
            </div>
            <div class="item-group">
                <label for="create-user_last-name">@Resources.LastName<font color="red">*</font></label>
                <input @bind-value="_userData.LastName"
                       @ref="_lastNameInput"
                       type="text"
                       id="create-user_last-name"
                       class="form-control"
                       @onkeyup="@((k) => {
                                   if (k.Code == "Enter" || k.Code == "ArrowDown")
                                       _middleNameInput.FocusAsync();})" />
                <ValidationMessage style="font-size: 0.7em;" For="() => _userData.LastName" />
            </div>
            <div class="item-group">
                <label for="create-user_middle-name">@Resources.MiddleName<font color="red">*</font></label>
                <input @bind-value="_userData.MiddleName"
                       @ref="_middleNameInput"
                       type="text"
                       id="create-user_middle-name"
                       class="form-control"
                       @onkeyup="@((k) => {
                                   if (k.Code == "Enter" || k.Code == "ArrowDown")
                                       _emailInput.FocusAsync();})" />
                <ValidationMessage style="font-size: 0.7em;" For="() => _userData.MiddleName" />
            </div>
            <div class="item-group">
                <label for="create-user_email">@Resources.Email<font color="red">*</font></label>
                <input @bind-value="_userCommunication.Value"
                       @ref="_emailInput"
                       type="email"
                       id="create-user_email"
                       class="form-control"
                       @onkeyup="@((k) => {
                                   if (k.Code == "Enter" || k.Code == "ArrowDown")
                                       _passwordInput.FocusAsync();})" />
                <ValidationMessage style="font-size: 0.7em;" For="() => _userCommunication.Value" />
            </div>
            <div class="item-group">
                <label for="create-user_password">@Resources.Password<font color="red">*</font></label>
                <div class="input-group">
                    <input @bind-value="_userData.Password"
                           @ref="_passwordInput"
                           id="create-user_password"
                           class="form-control"
                           @onkeyup="@((k) => {
                                       if (k.Code == "Enter" || k.Code == "ArrowDown")
                                           _startWorkingAtInput.FocusAsync();})" />
                    <button class="btn btn-primary"
                            type="button"
                            @onclick="@GeneratePassword">
                        @Resources.Generate
                    </button>
                </div>
                <ValidationMessage style="font-size: 0.7em;" For="() => _userData.Password" />
            </div>
            <div>
                <input @bind-value="_userData.IsAdmin"
                       type="checkbox"
                       class="btn btn-outline-primary" />
                <label for="create-user_is-admin">@Resources.IsAdmin</label>
            </div>
        </div>

        <div class="create-user_service-container">
            <div class="item-group">
                <label for="create-user_start-working-at">@Resources.StartWorkingAt<font color="red">*</font></label>
                <input @bind="_userData.StartWorkingAt"
                       @ref="_startWorkingAtInput"
                       type="date"
                       id="create-user_start-working-at"
                       class="form-control"
                       @onkeyup="@((k) => {
                                   if (k.Code == "Enter")
                                       _rateSelect.FocusAsync();})" />
            </div>
            <div class="item-group">
                <label for="create-user_rate">@Resources.Rate<font color="red">*</font></label>
                <select @bind="_userData.Rate"
                        @ref="_rateSelect"
                        id="create-user_rate"
                        class="form-select"
                        @onkeyup="@((k) => {
                                    if (k.Code == "ArrowDown")
                                        _departmentSelect.FocusAsync();})">
                    <option selected value="0.25">0.25</option>
                    <option value="0.5">0.5</option>
                    <option value="0.75">0.75</option>
                    <option value="1">1</option>
                </select>
            </div>
            <div class="item-group">
                <label for="create-user_department">@Resources.Department</label>
                <select @bind="_userData.DepartmentId"
                        @ref="_departmentSelect"
                        id="create-user_department"
                        class="form-select"
                        @onkeyup="@((k) => {
                                    if (k.Code == "ArrowDown")
                                        _positionSelect.FocusAsync();})">
                    <option value="null" selected>@Resources.NotSelected...</option>
                    @if (_departments != null)
                    {
                        foreach (var department in _departments.Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="item-group">
                <label for="create-user_position">@Resources.Position</label>
                <select @bind="_userData.PositionId"
                        @ref="_positionSelect"
                        id="create-user_position"
                        class="form-select"
                        @onkeyup="@((k) => {
                                    if (k.Code == "ArrowDown")
                                        _statusSelect.FocusAsync();})">
                    <option value="null" selected>@Resources.NotSelected...</option>
                    @if (_positions != null)
                    {
                        foreach (var position in _positions)
                        {
                            <option value="@position.Info.Id">@position.Info.Name</option>
                        }
                    }
                </select>
            </div>
            <div class="item-group">
                <label for="create-user_status">@Resources.Status</label>
                <select @bind="_userData.Status"
                        @ref="_statusSelect"
                        id="create-user_status"
                        class="form-select">
                    <option value="WorkFromHome" selected>Work from home</option>
                    <option value="WorkFromOffice">Work from office</option>
                    <option value="Vacation">Vacation</option>
                    <option value="Sick">Sick</option>
                </select>
            </div>
        </div>

        <div class="create-user_actions-container">
            <p class="info_container">@_message</p>
            <button class="btn btn-primary" type="submit">@Resources.CreateUser</button>
        </div>
    </div>
</EditForm>

    @code {
        private CreateUserRequest _userData = new();
        private CommunicationInfo _userCommunication = new();
        private DepartmentsResponse _departments;
        private ICollection<PositionResponse> _positions;
        private string _message;
        private ElementReference _lastNameInput;
        private ElementReference _middleNameInput;
        private ElementReference _emailInput;
        private ElementReference _passwordInput;
        private ElementReference _startWorkingAtInput;
        private ElementReference _rateSelect;
        private ElementReference _departmentSelect;
        private ElementReference _positionSelect;
        private ElementReference _statusSelect;

        private async Task GeneratePassword()
        {
            _userData.Password = await userService.GeneratePassword();
        }

        private async Task HandleValidSubmit()
        {
            _userCommunication.Type = CommunicationType.Email;
            _userData.Communications = new List<CommunicationInfo>();
            _userData.Communications.Add(_userCommunication);
            _message = await userService.CreateUser(_userData);
            StateHasChanged();
        }

        protected async override void OnInitialized()
        {
            _positions = await companyService.GetPositions();
            _departments = await companyService.GetDepartments();
            _userData.StartWorkingAt = DateTime.UtcNow;
            StateHasChanged();
        }
    }
