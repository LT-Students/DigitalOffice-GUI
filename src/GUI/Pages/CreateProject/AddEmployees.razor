@using LT.DigitalOffice.GUI.Properties;
@using LT.DigitalOffice.GUI.Services.Interfaces
@using LT.DigitalOffice.GUI.Services.ApiClients.UserService
@using LT.DigitalOffice.GUI.Services.ApiClients.ProjectService

@inject IUserService userService

<EditForm EditContext="@_editContext" OnSubmit="@HandleSubmit">
    
    <DataAnnotationsValidator />

    <p>@Resources.AddingProjectEmployees</p>

    <input type="text" class="form-control" placeholder="Search employee by keywords"
                aria-label="Username" aria-describedby="basic-addon1">

    <div style="display: flow-root">
        <div class="found-employes-content">
            <p>@Resources.FoundProjectEmployees</p>
            <div class="overflow-auto">
                @if (_foundEmployees is not null)
                {
                    @for (int i = 0; i < _foundEmployees.Count; i++)
                    {
                        @if (!statesFoundEmployeesSelected[i].isHiden)
                        {
                            <div 
                                class=@( statesFoundEmployeesSelected[i].isClickEmployee 
                                    ? "employee-content select-employee-content" 
                                    : "employee-content") 
                                @onclick="() => {var pair = statesFoundEmployeesSelected[i]; pair.isClickEmployee = !pair.isClickEmployee; statesFoundEmployeesSelected[i] = pair; _indexSelectEmployee.Add(i);}"> 
                                <p><img src=""/> @($"{_foundEmployees[i].FirstName} {_foundEmployees[i].LastName}") <font style="margin-left: 18%;"> @_foundEmployees[i].Rate </font> </p> 
                            </div>
                        }
                    }   
                }
            </div>
        </div>
        <div class="managed-employes">
            <button type="button"  class="btn btn-primary" data-toggle="modal" @onclick="AddFoundEmployees">@Resources.ProjectEmployeeAddButton</button>
            <button type="button"  class="btn btn-primary" data-toggle="modal">@Resources.ProjectEmployeeRemoveButton</button>
        </div>
        <div class="selected-employes-content">
            <p>@Resources.SelectedProjectEmployees</p>
            <div class="overflow-auto">
                @* @foreach (var user in @_selectedEmployees)
                {
                    <div class=@( statesSelectedEmployees[user.Index] ? "employee-content select-employee-content" : "employee-content") @onclick="() => statesSelectedEmployees[user.Index] = !statesSelectedEmployees[user.Index]"> 
                        <p><img src=""/> @user.UserName <font style="margin-left: 18%;"> @user.Position </font> </p> 
                    </div>
                } *@
            </div>
        </div>
    </div>
    <div id="action-buttons">
        <button type="button" class="btn btn-primary" @onclick="@(() => IsShowEmployeesFormChanged.InvokeAsync(false))">@Resources.ProjectModalBackButton</button>
        <button type="submit" class="btn btn-primary">@Resources.ProjectModalFinishButton</button>
    </div>
</EditForm>

@code {
    private List<int> _indexSelectEmployee;
    private int _countEmployees = 1;

    private EditContext _editContext;
    private List<UserInfo> _foundEmployees;
    private List<UserInfo> _selectedEmployees;

    private Dictionary<int, (bool isHiden, bool isClickEmployee)> statesFoundEmployeesSelected;
    private Dictionary<int, bool> statesSelectedEmployees;
    
    [Parameter]
    public ProjectRequest ProjectRequest { get; set; }

    [Parameter]
    public bool IsShowEmployeesForm { get; set; }

    [Parameter]
    public EventCallback<bool> IsShowEmployeesFormChanged { get; set; }

    [Parameter]
    public EventCallback<ProjectRequest> ProjectRequestChanged { get; set; }
    
    protected override void OnInitialized()
    {
        _editContext = new(ProjectRequest);
        
        _foundEmployees = new();
        _selectedEmployees = new();
        _indexSelectEmployee = new();
       
        statesFoundEmployeesSelected = new();
        statesSelectedEmployees = new();

        for (int i = 0; i < 8; i++)
        {
            statesFoundEmployeesSelected.Add(i, (false, false));
            statesSelectedEmployees.Add(i, false);
        }
    }

    private void AddFoundEmployees()
    {
        @* foreach (int index in _indexSelectEmployee)
        {
            var user = _foundEmployees[index];

            var pair = statesFoundEmployeesSelected[user.Index];
            pair.isHiden = true;
            pair.isClickEmployee = false;
            statesFoundEmployeesSelected[user.Index] = pair;

            user.Index = _selectedEmployees.Last().Index++;

            _selectedEmployees.Add(user);

            user.Index = index;
        } *@

        _indexSelectEmployee.Clear();
    }

    private void HandleSubmit()
    {
       // projectService.CreateProject(ProjectRequest);
    }
}

