@using LT.DigitalOffice.GUI.Properties;
@using LT.DigitalOffice.GUI.Services.Interfaces
@using LT.DigitalOffice.GUI.Services.ApiClients.UserService
@using LT.DigitalOffice.GUI.Services.ApiClients.ProjectService

@inject IUserService userService

<EditForm EditContext="@_editContext" OnSubmit="@HandleSubmit">
    
    <DataAnnotationsValidator />

    <p>@Resources.AddingProjectEmployees</p>

    <input type="text" class="form-control" placeholder="Search employee by keywords"
                aria-label="Username" aria-describedby="basic-addon1">

    <div style="display: flow-root">
        <div class="found-employes-content">
            <p>@Resources.FoundProjectEmployees</p>
               <Employees @ref="_foundEmployeesComponent" 
                Users="_foundEmployees" 
                HideEmployees="_hideFoundEmployees" 
                StatesSelectedEmployees="statesSelectedFoundEmployees"/>
        </div>
        <div class="managed-employes">
            <button type="button"  class="btn btn-primary" data-toggle="modal" @onclick="AddFoundEmployees">@Resources.ProjectEmployeeAddButton</button>
            <button type="button"  class="btn btn-primary" data-toggle="modal" @onclick="RemoveSelectedEmployees">@Resources.ProjectEmployeeRemoveButton</button>
        </div>
        <div class="selected-employes-content">
            <p>@Resources.SelectedProjectEmployees</p>
            <div class="overflow-auto">
                <Employees @ref="_selectedEmployeesComponent" 
                Users="_selectedEmployees" 
                HideEmployees="_hideSelectedEmployees" 
                StatesSelectedEmployees="_statesSelectedAddedEmployees"/>
            </div>
        </div>
    </div>
    <div id="action-buttons">
        <button type="button" class="btn btn-primary" @onclick="@(() => IsShowEmployeesFormChanged.InvokeAsync(false))">@Resources.ProjectModalBackButton</button>
        <button type="submit" class="btn btn-primary">@Resources.ProjectModalFinishButton</button>
    </div>
</EditForm>

@code {
    private Dictionary<int, bool> _hideFoundEmployees;
    private Dictionary<int, bool> _hideSelectedEmployees;
    private EditContext _editContext;
    private List<UserInfo> _foundEmployees;
    private List<UserInfo> _selectedEmployees;

    private Employees _foundEmployeesComponent;
    private Employees _selectedEmployeesComponent;

    private Dictionary<int, bool> statesSelectedFoundEmployees;
    private Dictionary<int, bool> _statesSelectedAddedEmployees;
    
    [Parameter]
    public ProjectRequest ProjectRequest { get; set; }

    [Parameter]
    public bool IsShowEmployeesForm { get; set; }

    [Parameter]
    public EventCallback<bool> IsShowEmployeesFormChanged { get; set; }

    [Parameter]
    public EventCallback<ProjectRequest> ProjectRequestChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _editContext = new(ProjectRequest);
        
        var response = await userService.GetUsers(ProjectRequest.DepartmentId, 0, 15);

        _foundEmployees = response.Users.ToList();
        _selectedEmployees = new();
        _hideFoundEmployees = new();
        _hideSelectedEmployees = new();
       
        statesSelectedFoundEmployees = new();
        _statesSelectedAddedEmployees = new();
        

        for (int i = 0; i < _foundEmployees.Count; i++)
        {
            _hideSelectedEmployees.Add(i, false);
            _hideFoundEmployees.Add(i, false);
            statesSelectedFoundEmployees.Add(i, false);
        }
    }

    private void AddFoundEmployees()
    {
        _selectedEmployees.AddRange(_foundEmployeesComponent.AddFoundEmployees());

        ProjectRequest.Users = _selectedEmployees
            .Select(x => 
                new ProjectUserRequest() 
                {
                    UserId = x.Id
                })
            .ToList();

        _statesSelectedAddedEmployees.Clear();
        for (int i = 0; i < _selectedEmployees.Count; i++)
        {
            _statesSelectedAddedEmployees.Add(i, false);
        }
    }

    private void RemoveSelectedEmployees()
    {
        var userIds = _selectedEmployeesComponent.RemoveSelectedEmployees();

        foreach (var id in userIds)
        {
            var index = _foundEmployees.FindIndex(x => x.Id == id);
            _hideFoundEmployees[index] = false;
        }

        
        _statesSelectedAddedEmployees.Clear();
        for (int i = 0; i < _selectedEmployees.Count; i++)
        {
            _statesSelectedAddedEmployees.Add(i, false);
        }
    }

    private void HandleSubmit()
    {
       // projectService.CreateProject(ProjectRequest);
    }
}

