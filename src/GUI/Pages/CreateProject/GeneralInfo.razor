@using Company = LT.DigitalOffice.GUI.Services.ApiClients.CompanyService
@using LT.DigitalOffice.GUI.Services.ApiClients.ProjectService
@using LT.DigitalOffice.GUI.Services.Interfaces
@using System.Collections.Generic
@using LT.DigitalOffice.GUI.Properties;

@inject ICompanyService companyService
@inject IProjectService projectService

<EditForm Model="@ProjectRequest" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>

    <p class="general-info-title" >@Resources.ProjectGeneralInfo</p>
    <div style="display: flow-root; margin-bottom: 25px;">
        <div class="additional-content">
            <label for="fullName">
                @Resources.ProjectFullNameInput <font color="red">*</font>
            </label>
            <div id="fullName">
                <input 
                    type="text" 
                    class="form-control" 
                    placeholder="Insert project full name"
                    aria-label="Username" 
                    aria-describedby="basic-addon1" 
                    @bind="ProjectRequest.Name">
            </div>
            <div class="short-description-input">
                <lable for="shortDescription">
                    @Resources.ProjectShortDescription
                </lable>
                <textarea 
                    id="shortDescription" 
                    rows="5" 
                    class="form-control"
                    aria-label="With textarea" 
                    @bind="ProjectRequest.ShortDescription"
                    placeholder="Insert project short description" >
                </textarea>
            </div>
        </div>
        <div class="main-content">
            <label for="shortName">
                @Resources.ProjectShortName <font color="red">*</font>
            </label>
            <div id="shortName">
                <input 
                    type="text" 
                    class="form-control" 
                    aria-label="Username" 
                    aria-describedby="basic-addon1" 
                    @bind="ProjectRequest.ShortName"
                    placeholder="Insert project full name">
            </div>
            <div style="display:grid">
                <label for="status">
                    @Resources.ProjectStatus <font color="red">*</font>
                </label>
                <div id="status" class="btn-group">
                    <button 
                        id="dropdown" 
                        type="button" 
                        class="btn btn-primary dropdown-toggle" 
                        data-toggle="dropdown"
                        aria-haspopup="true" 
                        aria-expanded="true">
                        @ProjectRequest.Status.ToString()
                    </button>
                    <div class="dropdown-menu">
                        <a 
                            class="dropdown-item" 
                            href="javascript:void(0)" 
                            @onclick="@(() => ProjectRequest.Status = ProjectStatusType.Active)">
                                @ProjectStatusType.Active
                        </a>
                        <a 
                            class="dropdown-item" 
                            href="javascript:void(0)" 
                            @onclick="@(() => ProjectRequest.Status = ProjectStatusType.Closed)">
                            @ProjectStatusType.Closed
                        </a>
                        <a 
                            class="dropdown-item" 
                            href="javascript:void(0)" 
                            @onclick="@(() => ProjectRequest.Status = ProjectStatusType.Suspend)">
                            @ProjectStatusType.Suspend
                        </a>
                    </div>
                </div>
            </div>
            <div class="department-input">
                <label for="department">
                    @Resources.ProjectDepartment <font color="red">*</font>
                </label>
                <div id="department" class="btn-group">
                    <button 
                        id="dropdown" 
                        type="button" 
                        class="btn btn-primary dropdown-toggle" 
                        data-toggle="dropdown"
                        aria-haspopup="true" 
                        aria-expanded="false">
                        @(_departmentValue ?? "Select department")
                    </button>
                    <div class="dropdown-menu">

                    @if (@_departments is not null)
                    {
                            @foreach (var department in @_departments)
                            {
                                <a 
                                        class="dropdown-item" 
                                        href="javascript:void(0)" 
                                        @onclick="@(() => {_departmentValue = department.Name; ProjectRequest.DepartmentId = department.Id; })">
                                            @department.Name
                                    </a>
                            }
                    }
                    
                    </div>
                </div>
            </div>
        </div>
    </div>
    <lable for="description">
        @Resources.ProjectDescription
    </lable>
    <textarea 
        id="description" 
        placeholder="Insert project description" 
        class="form-control" 
        aria-label="With textarea"
        rows="4" 
        @bind="ProjectRequest.Description">
    </textarea>
    <button type="submit" class="btn btn-primary">@Resources.ProjectModalNextButton</button>
</EditForm>

@code {
    private string _departmentValue;
    private string _validationMessage;
    private string _fullNameValidationMessage;
    private string _shortNameValidationMessage;
    private string _statusValidationMessage;
    private string _departmentValidationMessage;

    private List<Company.DepartmentInfo> _departments;
    
    [Parameter]
    public ProjectRequest ProjectRequest { get; set; }

    [Parameter]
    public bool IsShowEmployeesForm { get; set; }

    [Parameter]
    public EventCallback<bool> IsShowEmployeesFormChanged { get; set; }

    [Parameter]
    public EventCallback<ProjectRequest> ProjectRequestChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProjectRequest is null)
        {
            ProjectRequest = new();
        }

        _departments = (await companyService.GetDepartments()).Departments.ToList() 
            ?? new List<Company.DepartmentInfo>();
    }

    public void HandleSubmit()
    {
        IsShowEmployeesFormChanged.InvokeAsync(true);
        ProjectRequestChanged.InvokeAsync(ProjectRequest);
    }
}