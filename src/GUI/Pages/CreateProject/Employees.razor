@using LT.DigitalOffice.GUI.Services.ApiClients.UserService

<div class="overflow-auto">
    @if (Users is not null)
    {
        @for (int j = 0; j < Users.Count; j++)
        {
            int i = j;
            @if (!HideEmployees[i])
            {
                <div 
                    class=@( StatesSelectedEmployees[i] 
                            ? "employee-content select-employee-content" 
                            : "employee-content") 
                    @onclick="() => {StatesSelectedEmployees[i] = !StatesSelectedEmployees[i];}"> 
                    <p><img src=""/> @($"{Users[i].FirstName} {Users[i].LastName}") <font style="margin-left: 18%;"> @Users[i].Rate </font> </p> 
                </div>
            }
        }   
    }            
</div>

@code {
    [Parameter]
    public List<UserInfo> Users { get; set; }
    
    [Parameter]
    public Dictionary<int, bool> HideEmployees { get; set; }
    
    [Parameter]
    public Dictionary<int, bool> StatesSelectedEmployees { get; set; }

    public List<UserInfo> AddFoundEmployees()
    {
        List<UserInfo> selectedEmployees = new();

        foreach (int key in StatesSelectedEmployees.Keys)
        {
            if (StatesSelectedEmployees[key])
            {
                HideEmployees[key] = true;
                selectedEmployees.Add(Users[key]);

                StatesSelectedEmployees[key] = false;
            }
        }

        return selectedEmployees;
    }

    public List<Guid> RemoveSelectedEmployees()
    {
        List<Guid> userIds= new();

        for (int i = StatesSelectedEmployees.Count - 1; i >= 0; i--)
        {
            if (StatesSelectedEmployees[i])
            {
                userIds.Add(Users[i].Id);
                Users.RemoveAt(i);

                StatesSelectedEmployees[i] = false;
            }
        }

        return userIds;
    }
}