@using Models.Filters
@using LT.DigitalOffice.GUI.Services.ApiClients.ProjectService
@using LT.DigitalOffice.GUI.Services.Interfaces

<div class="filter-content">
    <p>Filter parameters:</p>
    <div class="dropdown">

        <button
            type="button"
            id="plus"
            data-toggle="dropdown"
            aria-haspopup="true"
            aria-expanded="false"
            @onclick="() => _isShowDropdownMenu = true">
        </button>

        @if (stateCheck(_projectNameRef, _showStateOfFiltersDropdown))
        {
            <div class=@(_isSearchButton ? "set-filter" : "filter") @onclick="() => _isSearchButton = false">
                @if (!_isSearchButton)
                {
                    <button @onclick="() => {_isSearchButton = true; FindTaskByProjectId(_tasksFilters.ProjectId);}" type="button" class="btn btn-primary">Search</button>
                    <select @bind="@_tasksFilters.ProjectId" class="form-select">

                        @foreach (var project in _projectsResponse?.Body ?? new List<ProjectInfo>())
                        {
                            <option @onclick="() => _isSearchButton = true" value="@project.Id">
                                @(string.IsNullOrEmpty(@project.ShortName) ? @project.Name : @project.ShortName)
                            </option>
                        }
                    </select>
                }
                else
                {
                    @("Project: " + _projectsResponse?.Body.FirstOrDefault(x => x.Id == _tasksFilters.ProjectId)?.ShortName)
                }
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _projectNameRef.Id)"></button>
            </div>
        }

        @if (stateCheck(_shortNameRef, _showStateOfFiltersDropdown))
        {
            <div class=@(GetStyleFilter(_shortNameRef.Id)) @onclick="() => _useFilterId = _shortNameRef.Id">
                Status: @_tasksFilters.StatusId
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _shortNameRef.Id)"></button>
            </div>
        }

        @if (stateCheck(_departmentRef, _showStateOfFiltersDropdown))
        {
            <div class=@(GetStyleFilter(_departmentRef.Id)) @onclick="() => _useFilterId = _departmentRef.Id">
                AssignedTo: @_tasksFilters.AssignedTo
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _departmentRef.Id)"></button>
            </div>
        }

        <div class="dropdown-menu @(_isShowDropdownMenu ? "dropdown-menu-show" : "")" aria-labelledby="plus">
            <a
                @ref=_projectNameRef
                class="@GetStyleFiltersOfDropdown(_projectNameRef)"
                href="javascript: void(0);"
                @onclick="() => SetFilter(_projectNameRef)">
                Project
            </a>
            <a
                @ref=_shortNameRef
                class="@GetStyleFiltersOfDropdown(_shortNameRef)"
                href="javascript: void(0);" @onclick="() => SetFilter(_shortNameRef)">
                Status
            </a>
            <a
                @ref=_departmentRef
                class="@GetStyleFiltersOfDropdown(_departmentRef)"
                href="javascript: void(0);"
                @onclick="() => SetFilter(_departmentRef)">
                AssignedTo
            </a>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public Func<Guid, Task> FindTaskByProjectId { get; set; }
    private string _useFilterId;
    private bool _isSearchButton;
    private bool _isShowDropdownMenu;
    private Dictionary<string, bool> _showStateOfFiltersDropdown;
    private Func<ElementReference, Dictionary<string, bool>, bool> stateCheck =
        (elementRef, states) => states is not null && !states[elementRef.Id];
        
    
    private ElementReference _projectNameRef;
    private ElementReference _shortNameRef;
    private ElementReference _departmentRef;

    private TasksFilter _tasksFilters;
    public FindResponseProjectInfo _projectsResponse;

    [Inject]
    private IProjectService _ProjectService { get; set; }

    protected override void OnInitialized()
    {
        _tasksFilters = new();
    }

    protected override void OnAfterRender(bool firstRender)
    {
         if (firstRender)
         {
             _showStateOfFiltersDropdown = new Dictionary<string, bool>
             {
                 {_projectNameRef.Id, true},
                 {_shortNameRef.Id, true},
                 {_departmentRef.Id, true}
             };
        }
    }

    private void SetValueToFilter(bool isRemoveFilter, string elementId = null)
    {
        elementId = elementId ?? _useFilterId;

        if (elementId is null)
        {
            return;
        }

        if (string.Equals(elementId, _projectNameRef.Id))
        {
           // _tasksFilters.AssignedTo = isRemoveFilter ? null : _searchValue;
        }
        else if (string.Equals(elementId, _departmentRef.Id))
        {
            //_projectsFilter.Department = isRemoveFilter ? null : _searchValue;
        }
        else
        {
            //_tasksFilters.ProjectId = isRemoveFilter ? null : _searchValue;
        }

        _showStateOfFiltersDropdown[elementId] = isRemoveFilter;
    }

    private string GetStyleFiltersOfDropdown(ElementReference elementRef)
    {
        if (_showStateOfFiltersDropdown is not null && !_showStateOfFiltersDropdown[elementRef.Id])
        {
            return "dropdown-menu-item-hide";
        }

        return "dropdown-item";
    }

    private string GetStyleFilter(string elementId)
    {
        return _useFilterId == elementId ? "set-filter" : "filter";
    }
    
    private async Task SetFilter(ElementReference elementRef)
    {
        _showStateOfFiltersDropdown[elementRef.Id] = false;
        
        if (string.Equals(elementRef.Id, _projectNameRef.Id))
        {
           _projectsResponse = await _ProjectService.FindProjects(0, int.MaxValue);
        }
        else if (string.Equals(elementRef.Id, _departmentRef.Id))
        {
            //_projectsFilter.Department = isRemoveFilter ? null : _searchValue;
        }
        else
        {
            //_tasksFilters.ProjectId = isRemoveFilter ? null : _searchValue;
        }

        _isShowDropdownMenu = false;
    }
}