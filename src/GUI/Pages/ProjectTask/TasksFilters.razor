@using Models.Filters
@using LT.DigitalOffice.GUI.Services.ApiClients.ProjectService
@using LT.DigitalOffice.GUI.Services.ApiClients.UserService
@using LT.DigitalOffice.GUI.Services.Interfaces

<div class="filter-content">
    <p>Filter parameters:</p>
    <div class="dropdown">

        <button
            type="button"
            id="plus"
            data-toggle="dropdown"
            aria-haspopup="true"
            aria-expanded="false"
            @onclick="() => _isShowDropdownMenu = true">
        </button>

        @if (stateCheck(_projectRef, _showStateOfFiltersDropdown))
        {
            <div class=@(_searchStateByFiltersDropdown[_projectRef.Id] ? "set-filter" : "filter") @onclick="() => _searchStateByFiltersDropdown[_projectRef.Id] = false">
                @if (!_searchStateByFiltersDropdown[_projectRef.Id])
                {
                    <button @onclick="() => {_searchStateByFiltersDropdown[_projectRef.Id] = true; FindTaskByProjectId(_tasksFilters.ProjectId);}" type="button" class="btn btn-primary">Search</button>
                    <select @bind="@_tasksFilters.ProjectId" class="form-select">

                        @if (_projectsResponse?.Body != null)
                        {
                            @foreach (var project in _projectsResponse.Body)
                            {
                                <option value="@project.Id">
                                    @(string.IsNullOrEmpty(@project.ShortName) ? @project.Name : @project.ShortName)
                                </option>
                            }
                        }

                    </select>
                }
                else
                {
                    var project = _projectsResponse?.Body.FirstOrDefault(x => x.Id == _tasksFilters.ProjectId);
                    @("Project: " + (string.IsNullOrEmpty(project?.ShortName) ? project.Name : project.ShortName))
                }
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _projectRef.Id)"></button>
            </div>
        }

        @if (stateCheck(_statusRef, _showStateOfFiltersDropdown))
        {
            <div class=@(_searchStateByFiltersDropdown[_statusRef.Id] ? "set-filter" : "filter") @onclick="() => _searchStateByFiltersDropdown[_statusRef.Id] = false">
                @if (!_searchStateByFiltersDropdown[_statusRef.Id])
                {
                    <button @onclick="() => {_searchStateByFiltersDropdown[_statusRef.Id] = true; FindTaskByStatusId(_tasksFilters.StatusId);}" type="button" class="btn btn-primary">Search</button>
                    <select @bind="@_tasksFilters.StatusId" class="form-select">

                        @if (_taskPropertyResponse != null)
                        {
                            @foreach (var property in _taskPropertyResponse.Body)
                            {
                                <option value="@property.Id"> @property?.Name</option>
                            }
                        }
                    </select>
                }
                else
                {
                    @("Status: " + _taskPropertyResponse?.Body.FirstOrDefault(x => x.Id == _tasksFilters.StatusId)?.Name)
                }
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _statusRef.Id)"></button>
            </div>
        }

        @if (stateCheck(_assignedToRef, _showStateOfFiltersDropdown))
        {
            <div class=@(_searchStateByFiltersDropdown[_assignedToRef.Id] ? "set-filter" : "filter") @onclick="() => _searchStateByFiltersDropdown[_assignedToRef.Id] = false">
                @if (!_searchStateByFiltersDropdown[_assignedToRef.Id])
                {
                    <button @onclick="() => {_searchStateByFiltersDropdown[_assignedToRef.Id] = true; FindTaskByStatusId(_tasksFilters.StatusId);}" type="button" class="btn btn-primary">Search</button>
                    <select @bind="@_tasksFilters.AssignedTo" class="form-select">

                        @if (_usersResponse != null)
                        {
                            @foreach (var user in _usersResponse?.Body)
                            {
                                <option value="@user.Id"> @(string.Join(" ", user.FirstName, user.LastName))</option>
                            }
                        }
                    </select>
                }
                else
                {
                    UserInfo user = _usersResponse?.Body.FirstOrDefault(x => x.Id == _tasksFilters.AssignedTo);
                    @("AssignedTo: " + string.Join(" ", user?.FirstName, user?.LastName));
                }
                <button class="remove-button" @onclick="() => SetValueToFilter(isRemoveFilter: true, _assignedToRef.Id)"></button>
            </div>
        }

        <div class="dropdown-menu @(_isShowDropdownMenu ? "dropdown-menu-show" : "")" aria-labelledby="plus">
            <a
                @ref=_projectRef
                class="@GetStyleFiltersOfDropdown(_projectRef)"
                href="javascript: void(0);"
                @onclick="() => SetFilter(_projectRef)">
                Project
            </a>
            <a
                @ref=_statusRef
                class="@GetStyleFiltersOfDropdown(_statusRef)"
                href="javascript: void(0);" @onclick="() => SetFilter(_statusRef)">
                Status
            </a>
            <a
                @ref=_assignedToRef
                class="@GetStyleFiltersOfDropdown(_assignedToRef)"
                href="javascript: void(0);"
                @onclick="() => SetFilter(_assignedToRef)">
                AssignedTo
            </a>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public Func<Guid, Task> FindTaskByProjectId { get; set; }

    [Parameter]
    public Func<Guid, Task> FindTaskByStatusId { get; set; }

    private string _useFilterId;
    private bool _isSearchProject;
    private bool _isShowDropdownMenu;
    private Dictionary<string, bool> _showStateOfFiltersDropdown;
    private Dictionary<string, bool> _searchStateByFiltersDropdown;
    private Func<ElementReference, Dictionary<string, bool>, bool> stateCheck =
        (elementRef, states) => states is not null && !states[elementRef.Id];
        
    private ElementReference _projectRef;
    private ElementReference _statusRef;
    private ElementReference _assignedToRef;

    private TasksFilter _tasksFilters;
    private FindResponseProjectInfo _projectsResponse;
    private FindResultResponseUserInfo _usersResponse;
    private FindResponseTaskProperty _taskPropertyResponse;

    [Inject]
    private IUserService _UserService { get; set; }

    [Inject]
    private IProjectService _ProjectService { get; set; }

    protected override void OnInitialized()
    {
        _tasksFilters = new();
    }

    protected override void OnAfterRender(bool firstRender)
    {
         if (firstRender)
         {
             _showStateOfFiltersDropdown = new Dictionary<string, bool>
             {
                 {_projectRef.Id, true},
                 {_statusRef.Id, true},
                 {_assignedToRef.Id, true}
             };

             _searchStateByFiltersDropdown = new Dictionary<string, bool>
            {
                {_projectRef.Id, false},
                {_statusRef.Id, false},
                {_assignedToRef.Id, false}
            };
        }
    }

    private void SetValueToFilter(bool isRemoveFilter, string elementId = null)
    {
        elementId = elementId ?? _useFilterId;

        if (elementId is null)
        {
            return;
        }

        if (string.Equals(elementId, _projectRef.Id))
        {
           // _tasksFilters.AssignedTo = isRemoveFilter ? null : _searchValue;
        }
        else if (string.Equals(elementId, _assignedToRef.Id))
        {
            //_projectsFilter.Department = isRemoveFilter ? null : _searchValue;
        }
        else
        {
            //_tasksFilters.ProjectId = isRemoveFilter ? null : _searchValue;
        }

        _showStateOfFiltersDropdown[elementId] = isRemoveFilter;
    }

    private string GetStyleFiltersOfDropdown(ElementReference elementRef)
    {
        if (_showStateOfFiltersDropdown is not null && !_showStateOfFiltersDropdown[elementRef.Id])
        {
            return "dropdown-menu-item-hide";
        }

        return "dropdown-item";
    }

    private string GetStyleFilter(string elementId)
    {
        return _useFilterId == elementId ? "set-filter" : "filter";
    }
    
    private async Task SetFilter(ElementReference elementRef)
    {
        _showStateOfFiltersDropdown[elementRef.Id] = false;
        
        if (string.Equals(elementRef.Id, _projectRef.Id))
        {
            _projectsResponse = await _ProjectService.FindProjects(0, int.MaxValue);
        }
        else if (string.Equals(elementRef.Id, _statusRef.Id))
        {
            _taskPropertyResponse = await _ProjectService.GetTaskPropertiesAsync(0, int.MaxValue);
        }
        else if (string.Equals(elementRef.Id, _assignedToRef.Id))
        {
            _usersResponse = await _UserService.FindUsersAsync(0, int.MaxValue, null);
        }

        _isShowDropdownMenu = false;
    }
}