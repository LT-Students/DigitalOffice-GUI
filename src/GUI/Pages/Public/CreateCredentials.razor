@using System.Threading.Tasks;
@using LT.DigitalOffice.GUI.Services.Interfaces;
@using LT.DigitalOffice.GUI.Services.ApiClients.UserService;
@using LT.DigitalOffice.GUI.Properties;

@inject IUserService userService
@page "/credentials/{Id:guid}"

<div class="create-credentials_container">
    <div class="create-credentials_content">
        <div class="item-group">
            <label for="create-credentials_login">@Resources.Login</label>
            <input @bind-value="_credentialsData.Login"
                   type="text"
                   class="form-control"
                   id="create-credentials_login"
                   @onkeyup="@(async (k) => {
                               if (k.Code == "Enter" || k.Code == "ArrowDown")
                                   await _passwordInput.FocusAsync(); })" />
        </div>
        <div class="item-group">
            <label for="create-credentials_password">@Resources.Password</label>
            <input @bind-value="_credentialsData.Password"
                   @ref="_passwordInput"
                   type="password"
                   class="form-control"
                   id="create-credentials_password"
                   @onkeyup="@(async (k) => { if (k.Code == "Enter") await Post(); })" />
        </div>
        <p class="error_text">@_message</p>
        <button class="btn btn-primary" @onclick="@Post">Enter</button>
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private CreateCredentialsRequest _credentialsData = new();
    private string _message;

    private ElementReference _passwordInput;

    private async Task Post()
    {
        _credentialsData.UserId = Id;
        _message = await userService.CreateCredentials(_credentialsData);
    }
}
