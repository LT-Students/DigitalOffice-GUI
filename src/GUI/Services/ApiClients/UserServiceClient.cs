//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace LT.DigitalOffice.GUI.Services.ApiClients.UserService
{
  using System = global::System;

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class UserServiceClient
  {
    private string _baseUrl = "https://user.dev.ltdo.xyz";/*"http://localhost:9802";*/
    private System.Net.Http.HttpClient _httpClient;
    private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

    public UserServiceClient(System.Net.Http.HttpClient httpClient)
    {
      _httpClient = httpClient;
      _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
    }

    private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
    {
      var settings = new Newtonsoft.Json.JsonSerializerSettings();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    public string BaseUrl
    {
      get { return _baseUrl; }
      set { _baseUrl = value; }
    }

    protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
    partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
    partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Created. User Id (uuid) will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> CreateUserAsync(CreateUserRequest body, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/create");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 201)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.\n* User is not admin and don\'t has rights.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.
    /// <br/>* Update user operation success (boolean) status will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> EditUserActiveAsync(string token, EditUserActiveRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/editactive");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="userId">Specific user id</param>
    /// <returns>Ok.
    /// <br/>* Update user operation success (boolean) status will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> EditUserAsync(string token, System.Guid userId, System.Collections.Generic.IEnumerable<PatchUserDocument> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userId == null)
        throw new System.ArgumentNullException("userId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/edit?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PATCH");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="userId">User global unique identifier.</param>
    /// <param name="email">Any of user emails. Can not be used with `includecommunications`.</param>
    /// <param name="includecurrentavatar">Include user current avatar in answer.</param>
    /// <param name="includeavatars">Include all user current avatars in answer.</param>
    /// <param name="includecertificates">Include user certificates info in answer.</param>
    /// <param name="includecommunications">Include user communications info in answer.</param>
    /// <param name="includecompany">Include user company info in answer.</param>
    /// <param name="includedepartment">Include user department info in answer.</param>
    /// <param name="includeeducations">Include educations info in answer.</param>
    /// <param name="includeoffice">Include user office info in answer.</param>
    /// <param name="includeposition">Include user position info in answer.</param>
    /// <param name="includeprojects">Include user projects info in answer.</param>
    /// <param name="includerole">Include user role info in answer.</param>
    /// <param name="includeskills">Include user skills info in answer.</param>
    /// <param name="locale">Role localization.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponseUserResponse> GetUserAsync(string token, System.Guid? userId = null, string email = null, bool? includecurrentavatar = null, bool? includeavatars = null, bool? includecertificates = null, bool? includecommunications = null, bool? includecompany = null, bool? includedepartment = null, bool? includeeducations = null, bool? includeoffice = null, bool? includeposition = null, bool? includeprojects = null, bool? includerole = null, bool? includeskills = null, string locale = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/get?");
      if (userId != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (email != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecurrentavatar != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecurrentavatar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecurrentavatar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeavatars != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeavatars") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeavatars, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecertificates != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecertificates") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecertificates, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecommunications != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecommunications") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecommunications, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecompany != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecompany") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecompany, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includedepartment != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includedepartment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includedepartment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeeducations != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeeducations") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeeducations, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeoffice != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeoffice") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeoffice, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeposition != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeposition") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeposition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeprojects != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeprojects") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeprojects, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includerole != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includerole") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includerole, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includeskills != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includeskills") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeskills, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (locale != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("locale") + "=").Append(System.Uri.EscapeDataString(ConvertToString(locale, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponseUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="skipCount">Number of entries to skip.</param>
    /// <param name="takeCount">Number of users to take.</param>
    /// <param name="isascendingsort">When value is 'true' sorts A-Z, when value is 'false' sorts Z-A</param>
    /// <param name="fullnameincludesubstring">Find for users containing a substring in the full name</param>
    /// <returns>Ok.
    /// <br/>* Successfully returned list of users information.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FindResultResponseUserInfo> FindUsersAsync(string token, int skipCount, int takeCount, bool? isascendingsort = null, string fullnameincludesubstring = null, bool? isactive = null, bool? includecurrentavatar = null, bool? includecommunications = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (skipCount == null)
        throw new System.ArgumentNullException("skipCount");

      if (takeCount == null)
        throw new System.ArgumentNullException("takeCount");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/user/find?");
      urlBuilder_.Append(System.Uri.EscapeDataString("skipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("takeCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(takeCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      if (isascendingsort != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("isascendingsort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isascendingsort, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (fullnameincludesubstring != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("fullnameincludesubstring") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fullnameincludesubstring, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (isactive != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("isactive") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isactive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecurrentavatar != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecurrentavatar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecurrentavatar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecommunications != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecommunications") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecommunications, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseUserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseUserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<FindResultResponseUserInfo>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Ok. Success create credentials.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponseCredentialsResponse> CreateCredentialsAsync(CreateCredentialsRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/credentials/create");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 201)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponseCredentialsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 503)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Service Unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Ok. Success reactivate credentials.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponseCredentialsResponse> ReactivateCredentialsAsync(ReactivateCredentialsRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/credentials/reactivate");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponseCredentialsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="userid">Unique user identifier.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> CheckPendingAsync(System.Guid userid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userid == null)
        throw new System.ArgumentNullException("userid");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pending/check?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="skipCount">Number of entries to skip.</param>
    /// <param name="takeCount">Number of users to take.</param>
    /// <param name="includecommunication">includes user communications</param>
    /// <param name="includecurrentavatar">includes user avatar</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FindResultResponseUserInfo> FindPendingAsync(string token, int skipCount, int takeCount, bool? includecommunication = null, bool? includecurrentavatar = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (skipCount == null)
        throw new System.ArgumentNullException("skipCount");

      if (takeCount == null)
        throw new System.ArgumentNullException("takeCount");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pending/find?");
      urlBuilder_.Append(System.Uri.EscapeDataString("skipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("takeCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(takeCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      if (includecommunication != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecommunication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecommunication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      if (includecurrentavatar != null)
      {
        urlBuilder_.Append(System.Uri.EscapeDataString("includecurrentavatar") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includecurrentavatar, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      }
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseUserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseUserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<FindResultResponseUserInfo>("BadRequest.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="userId">User global unique identifier.</param>
    /// <param name="communicationId">Communication global unique identifier.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ResendinvitationPendingAsync(string token, System.Guid userId, System.Guid communicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userId == null)
        throw new System.ArgumentNullException("userId");

      if (communicationId == null)
        throw new System.ArgumentNullException("communicationId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pending/resendinvitation?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("communicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("BadRequest.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("NotFound.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="userId">User global unique identifier.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> RemovePendingAsync(string token, System.Guid userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userId == null)
        throw new System.ArgumentNullException("userId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pending/remove?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("NotFound.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.
    /// <br/>* Successfully returned password string.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<string> GeneratePasswordAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/password/generate");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.
    /// <br/>* Change user password operation success (boolean) status will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ChangePasswordAsync(string token, ChangePasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/password/change");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Ok.
    /// <br/>* Change user password operation success (boolean) status will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ReconstructPasswordAsync(ReconstructPasswordRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/password/reconstruct");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <returns>Ok.
    /// <br/>* Send email operation success (boolean) status will be in response Body property.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ForgotPasswordAsync(string userEmail, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userEmail == null)
        throw new System.ArgumentNullException("userEmail");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/password/forgot?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found. User with this email was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Created.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> CreateCommunicationAsync(CreateCommunicationRequest body, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/communication/create");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 201)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="communicationId">Specific communication id</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> EditCommunicationAsync(string token, System.Guid communicationId, EditCommunicationRequest body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (communicationId == null)
        throw new System.ArgumentNullException("communicationId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/communication/edit?");
      urlBuilder_.Append(System.Uri.EscapeDataString("communicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="communicationId">Specific communication id</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> RemoveCommunicationAsync(string token, System.Guid communicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (communicationId == null)
        throw new System.ArgumentNullException("communicationId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/communication/remove?");
      urlBuilder_.Append(System.Uri.EscapeDataString("communicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("DELETE");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not Found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="communicationId">Specific communication id</param>
    /// <param name="secret">Specific word from email link</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ConfirmCommunicationAsync(string token, System.Guid communicationId, System.Guid secret, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (communicationId == null)
        throw new System.ArgumentNullException("communicationId");

      if (secret == null)
        throw new System.ArgumentNullException("secret");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/communication/confirm?");
      urlBuilder_.Append(System.Uri.EscapeDataString("communicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("secret") + "=").Append(System.Uri.EscapeDataString(ConvertToString(secret, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
          request_.Method = new System.Net.Http.HttpMethod("PUT");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="communicationId">Specific communication id</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> ResendConfirmationCommunicationAsync(string token, System.Guid communicationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (communicationId == null)
        throw new System.ArgumentNullException("communicationId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/communication/resendconfirmation?");
      urlBuilder_.Append(System.Uri.EscapeDataString("communicationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(communicationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok. Image was added.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> CreateAvatarAsync(CreateAvatarRequest body, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/avatar/create");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 201)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponseImagesResponse> GetAvatarAsync(string token, System.Guid userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userId == null)
        throw new System.ArgumentNullException("userId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/avatar/get?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponseImagesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 404)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> RemoveAvatarAsync(RemoveAvatarRequest body, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/avatar/remove");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> EditAvatarAsync(string token, System.Guid userId, System.Guid imageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (userId == null)
        throw new System.ArgumentNullException("userId");

      if (imageId == null)
        throw new System.ArgumentNullException("imageId");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/avatar/editcurrent?");
      urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("imageId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(imageId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            if (status_ == 403)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Forbidden.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <returns>Ok. Gender was created.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<OperationResultResponse> CreateGenderAsync(CreateGenderRequest body, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (body == null)
        throw new System.ArgumentNullException("body");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/gender/create");

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
          content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
          request_.Content = content_;
          request_.Method = new System.Net.Http.HttpMethod("POST");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 201)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<OperationResultResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<OperationResultResponse>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <param name="token">The JWT token.</param>
    /// <param name="skipCount">Number of entries to skip.</param>
    /// <param name="takeCount">Number of genders to take.</param>
    /// <returns>Ok.
    /// <br/>* Successfully returned list of genders.</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async System.Threading.Tasks.Task<FindResultResponseGenderInfo> FindGenderAsync(string token, int skipCount, int takeCount, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      if (skipCount == null)
        throw new System.ArgumentNullException("skipCount");

      if (takeCount == null)
        throw new System.ArgumentNullException("takeCount");

      var urlBuilder_ = new System.Text.StringBuilder();
      urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/gender/find?");
      urlBuilder_.Append(System.Uri.EscapeDataString("skipCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skipCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Append(System.Uri.EscapeDataString("takeCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(takeCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
      urlBuilder_.Length--;

      var client_ = _httpClient;
      var disposeClient_ = false;
      try
      {
        using (var request_ = new System.Net.Http.HttpRequestMessage())
        {

          if (token == null)
            throw new System.ArgumentNullException("token");
          request_.Headers.TryAddWithoutValidation("token", ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture));
          request_.Method = new System.Net.Http.HttpMethod("GET");
          request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try
          {
            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null)
            {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseGenderInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return objectResponse_.Object;
            }
            else
            if (status_ == 400)
            {
              var objectResponse_ = await ReadObjectResponseAsync<FindResultResponseGenderInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null)
              {
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              throw new ApiException<FindResultResponseGenderInfo>("Bad Request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
            }
            else
            {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally
          {
            if (disposeResponse_)
              response_.Dispose();
          }
        }
      }
      finally
      {
        if (disposeClient_)
          client_.Dispose();
      }
    }

    protected struct ObjectResponseResult<T>
    {
      public ObjectResponseResult(T responseObject, string responseText)
      {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; }

    protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
    {
      if (response == null || response.Content == null)
      {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString)
      {
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        try
        {
          var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else
      {
        try
        {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
          using (var streamReader = new System.IO.StreamReader(responseStream))
          using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
          {
            var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
            var typedBody = serializer.Deserialize<T>(jsonTextReader);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (Newtonsoft.Json.JsonException exception)
        {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
    {
      if (value == null)
      {
        return "";
      }

      if (value is System.Enum)
      {
        var name = System.Enum.GetName(value.GetType(), value);
        if (name != null)
        {
          var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null)
          {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                as System.Runtime.Serialization.EnumMemberAttribute;
            if (attribute != null)
            {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
          return converted == null ? string.Empty : converted;
        }
      }
      else if (value is bool)
      {
        return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[])
      {
        return System.Convert.ToBase64String((byte[])value);
      }
      else if (value.GetType().IsArray)
      {
        var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      var result = System.Convert.ToString(value, cultureInfo);
      return result == null ? "" : result;
    }
  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class OperationResultResponseUserResponse
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public UserResponse Body { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class UserResponse
  {
    [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public UserInfo User { get; set; } = new UserInfo();

    [Newtonsoft.Json.JsonProperty("UserAddition", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public UserAdditionInfo UserAddition { get; set; } = new UserAdditionInfo();

    [Newtonsoft.Json.JsonProperty("CompanyUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CompanyUserInfo CompanyUser { get; set; }

    [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public DepartmentUserInfo Department { get; set; }

    [Newtonsoft.Json.JsonProperty("Office", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public OfficeInfo Office { get; set; }

    [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PositionInfo Position { get; set; }

    [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public RoleInfo Role { get; set; }

    [Newtonsoft.Json.JsonProperty("Images", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ImageInfo> Images { get; set; }

    [Newtonsoft.Json.JsonProperty("Educations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<EducationInfo> Educations { get; set; }

    [Newtonsoft.Json.JsonProperty("Projects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<ProjectInfo> Projects { get; set; }

    [Newtonsoft.Json.JsonProperty("Skills", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<string> Skills { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class FindResultResponseUserInfo
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<UserInfo> Body { get; set; } = new System.Collections.ObjectModel.Collection<UserInfo>();

    [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Always)]
    public double TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateUserRequest
  {
    /// <summary>
    /// First name of a user.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string FirstName { get; set; }

    /// <summary>
    /// Last name of a user.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string LastName { get; set; }

    /// <summary>
    /// Middle name of a user.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("MiddleName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MiddleName { get; set; }

    /// <summary>
    /// Mark whether the user is an administrator.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("IsAdmin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public bool IsAdmin { get; set; } = false;

    /// <summary>
    /// Date of user birth.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DayOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DayOfBirth { get; set; }

    [Newtonsoft.Json.JsonProperty("About", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string About { get; set; }

    /// <summary>
    /// Time when the user start work day.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("BusinessHoursFromUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset BusinessHoursFromUtc { get; set; }

    /// <summary>
    /// Time when the user finish work day.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("BusinessHoursToUtc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset BusinessHoursToUtc { get; set; }

    /// <summary>
    /// User location.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Latitude { get; set; }

    /// <summary>
    /// User location.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double Longitude { get; set; }

    [Newtonsoft.Json.JsonProperty("UserCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CreateUserCompanyRequest UserCompany { get; set; }

    /// <summary>
    /// User department ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("DepartmentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid DepartmentId { get; set; }

    /// <summary>
    /// User office ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("OfficeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid OfficeId { get; set; }

    /// <summary>
    /// User position ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("PositionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid PositionId { get; set; }

    /// <summary>
    /// User role ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("RoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid RoleId { get; set; }

    /// <summary>
    /// User password.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Password { get; set; }

    [Newtonsoft.Json.JsonProperty("AvatarImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public AddImageRequest AvatarImage { get; set; }

    [Newtonsoft.Json.JsonProperty("Communication", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CreateCommunicationRequest Communication { get; set; } = new CreateCommunicationRequest();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateCredentialsRequest
  {
    /// <summary>
    /// Unique user identifier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    /// <summary>
    /// User login.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Login", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Login { get; set; }

    /// <summary>
    /// User password received by email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Password { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum DepartmentUserRole
  {

    [System.Runtime.Serialization.EnumMember(Value = @"Employee")]
    Employee = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Manager")]
    Manager = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ReactivateCredentialsRequest
  {
    /// <summary>
    /// Unique user identifier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    /// <summary>
    /// User password received by email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Password { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EditUserActiveRequest
  {
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
    public bool IsActive { get; set; }

    /// <summary>
    /// used when restoring a user from an archive
    /// </summary>
    [Newtonsoft.Json.JsonProperty("CommunicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid CommunicationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EditUserRequest : System.Collections.ObjectModel.Collection<PatchUserDocument>
  {

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class PatchUserDocument
  {
    /// <summary>
    /// The operation to be performed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PatchUserDocumentOp Op { get; set; }

    /// <summary>
    /// A JSON-Pointer.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public PatchUserDocumentPath Path { get; set; }

    /// <summary>
    /// The value to be used within the operations.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class OperationResultResponseCredentialsResponse
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public CredentialsResponse Body { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CredentialsResponse
  {
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string AccessToken { get; set; }

    [Newtonsoft.Json.JsonProperty("RefreshToken", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string RefreshToken { get; set; }

    /// <summary>
    /// AccessToken life time in minutes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("AccessTokenExpiresIn", Required = Newtonsoft.Json.Required.Always)]
    public double AccessTokenExpiresIn { get; set; }

    /// <summary>
    /// RefreshToken life time in minutes
    /// </summary>
    [Newtonsoft.Json.JsonProperty("RefreshTokenExpiresIn", Required = Newtonsoft.Json.Required.Always)]
    public double RefreshTokenExpiresIn { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class PendingUserInfo
  {
    /// <summary>
    /// communication to which an invitation with a password was sent.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("InvitationCommunicationId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid InvitationCommunicationId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class UserAdditionInfo
  {
    [Newtonsoft.Json.JsonProperty("GenderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string GenderName { get; set; }

    [Newtonsoft.Json.JsonProperty("About", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string About { get; set; }

    [Newtonsoft.Json.JsonProperty("DateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? DateOfBirth { get; set; }

    [Newtonsoft.Json.JsonProperty("BusinessHoursFromUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? BusinessHoursFromUtc { get; set; }

    [Newtonsoft.Json.JsonProperty("BusinessHoursToUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? BusinessHoursToUtc { get; set; }

    [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Latitude { get; set; }

    [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Longitude { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class UserInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string FirstName { get; set; }

    [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string LastName { get; set; }

    [Newtonsoft.Json.JsonProperty("MiddleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string MiddleName { get; set; }

    [Newtonsoft.Json.JsonProperty("IsAdmin", Required = Newtonsoft.Json.Required.Always)]
    public bool IsAdmin { get; set; }

    [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
    public bool IsActive { get; set; }

    [Newtonsoft.Json.JsonProperty("PendingInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public PendingUserInfo PendingInfo { get; set; }

    [Newtonsoft.Json.JsonProperty("Avatar", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ImageInfo Avatar { get; set; }

    [Newtonsoft.Json.JsonProperty("Communications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<CommunicationInfo> Communications { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Contract term type.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ContractTerm
  {

    [System.Runtime.Serialization.EnumMember(Value = @"FixedTerm")]
    FixedTerm = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Perpetual")]
    Perpetual = 1,

  }

  /// <summary>
  /// Type of image.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum ImageType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"Full")]
    Full = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Thumb")]
    Thumb = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ImageInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("ParentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? ParentId { get; set; }

    /// <summary>
    /// Image file content in base64 encoded string.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Extension { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ImageConsist
  {
    /// <summary>
    /// Image file content in base64 encoded string.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Content { get; set; }

    [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Extension { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CompanyUserInfo
  {
    [Newtonsoft.Json.JsonProperty("Company", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public CompanyInfo Company { get; set; } = new CompanyInfo();

    [Newtonsoft.Json.JsonProperty("ContractSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ContractSubjectData ContractSubject { get; set; }

    [Newtonsoft.Json.JsonProperty("ContractTermType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ContractTerm ContractTermType { get; set; }

    [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Rate { get; set; }

    [Newtonsoft.Json.JsonProperty("StartWorkingAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset StartWorkingAt { get; set; }

    [Newtonsoft.Json.JsonProperty("EndWorkingAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? EndWorkingAt { get; set; }

    [Newtonsoft.Json.JsonProperty("Probation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset? Probation { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ContractSubjectData
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CompanyInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class DepartmentInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ShortName { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class DepartmentUserInfo
  {
    [Newtonsoft.Json.JsonProperty("Department", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public DepartmentInfo Department { get; set; } = new DepartmentInfo();

    [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public DepartmentUserRole Role { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class PositionInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class RoleInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("RightsIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<int> RightsIds { get; set; } = new System.Collections.ObjectModel.Collection<int>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class OfficeInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string City { get; set; }

    [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Address { get; set; }

    [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Longitude { get; set; }

    [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public double? Latitude { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CommunicationInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationType Type { get; set; }

    [Newtonsoft.Json.JsonProperty("IsConfirmed", Required = Newtonsoft.Json.Required.Always)]
    public bool IsConfirmed { get; set; }

    [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("VisibleTo", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationVisibleTo VisibleTo { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ProjectInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Status { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string ShortName { get; set; }

    [Newtonsoft.Json.JsonProperty("ShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string ShortDescription { get; set; }

    [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public ProjectUserInfo User { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ProjectUserInfo
  {
    [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.Always)]
    public bool IsActive { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class GenderInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EducationInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("UniversityName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string UniversityName { get; set; }

    [Newtonsoft.Json.JsonProperty("QualificationName", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string QualificationName { get; set; }

    [Newtonsoft.Json.JsonProperty("EducationForm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EducationFormInfo EducationForm { get; set; }

    [Newtonsoft.Json.JsonProperty("EducationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public EducationTypeInfo EducationType { get; set; }

    [Newtonsoft.Json.JsonProperty("Completeness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Completeness { get; set; }

    [Newtonsoft.Json.JsonProperty("AdmissionAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string AdmissionAt { get; set; }

    [Newtonsoft.Json.JsonProperty("IssueAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string IssueAt { get; set; }

    [Newtonsoft.Json.JsonProperty("ImagesIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Collections.Generic.ICollection<System.Guid> ImagesIds { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EducationTypeInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EducationFormInfo
  {
    [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid Id { get; set; }

    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ChangePasswordRequest
  {
    /// <summary>
    /// Old user password.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Password { get; set; }

    /// <summary>
    /// New user password.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NewPassword", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string NewPassword { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ReconstructPasswordRequest
  {
    /// <summary>
    /// Unique user identifier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    /// <summary>
    /// Secret from email.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Secret", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Secret { get; set; }

    /// <summary>
    /// User login.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Login", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Login { get; set; }

    /// <summary>
    /// New user password.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("NewPassword", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string NewPassword { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class OperationResultResponse
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Body { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Communication type.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum CommunicationType
  {

    [System.Runtime.Serialization.EnumMember(Value = @"Skype")]
    Skype = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Phone")]
    Phone = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"Email")]
    Email = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"Telegram")]
    Telegram = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"Twitter")]
    Twitter = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"BaseEmail")]
    BaseEmail = 5,

  }

  /// <summary>
  /// Mode for user communication visibe to.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum CommunicationVisibleTo
  {

    [System.Runtime.Serialization.EnumMember(Value = @"AllUsers")]
    AllUsers = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"Admin")]
    Admin = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class BadRequest
  {
    /// <summary>
    /// contains arrays of error messages (format: strings)
    /// </summary>
    [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object Errors { get; set; }

    [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Type { get; set; }

    [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Title { get; set; }

    [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public int Status { get; set; }

    [Newtonsoft.Json.JsonProperty("traceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid TraceId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class AddImageRequest
  {
    /// <summary>
    /// Image name.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    /// <summary>
    /// Image content.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public byte[] Content { get; set; }

    /// <summary>
    /// Image extension.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Extension { get; set; }

    /// <summary>
    /// shows whether the image is the current avatar or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("IsCurrentAvatar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object IsCurrentAvatar { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateCommunicationRequest
  {
    /// <summary>
    /// Unique user identifier. Is null if create with user creating
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid? UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationType Type { get; set; }

    /// <summary>
    /// Communication value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Value { get; set; }

    [Newtonsoft.Json.JsonProperty("VisibleTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationVisibleTo VisibleTo { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class EditCommunicationRequest
  {
    /// <summary>
    /// allows to establish the confirmed communication as BaseEmail.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationType Type { get; set; }

    /// <summary>
    /// new the communication value
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Value { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CommunicationPatchDocument
  {
    /// <summary>
    /// The operation to be performed.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationPatchDocumentOp Op { get; set; }

    /// <summary>
    /// A JSON-Pointer.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public CommunicationPatchDocumentPath Path { get; set; }

    /// <summary>
    /// The value to be used within the operations.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public object Value { get; set; } = new object();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateAvatarRequest
  {
    /// <summary>
    /// Unique entity user identifier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid UserId { get; set; }

    /// <summary>
    /// Image name
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// Image content.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public byte[] Content { get; set; }

    /// <summary>
    /// Image extension.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Extension", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Extension { get; set; }

    /// <summary>
    /// shows whether the image is the current avatar or not
    /// </summary>
    [Newtonsoft.Json.JsonProperty("IsCurrentAvatar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public object IsCurrentAvatar { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class RemoveAvatarRequest
  {
    /// <summary>
    /// Unique user identifier.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid UserId { get; set; }

    [Newtonsoft.Json.JsonProperty("ImagesIds", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<System.Guid> ImagesIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateUserCompanyRequest
  {
    /// <summary>
    /// User's contract subject ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("ContractSubjectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public System.Guid ContractSubjectId { get; set; }

    [Newtonsoft.Json.JsonProperty("ContractTermType", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public ContractTerm ContractTermType { get; set; }

    /// <summary>
    /// Time when the user started working for the company.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("StartWorkingAt", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset StartWorkingAt { get; set; }

    /// <summary>
    /// Time when the user will end working for the company.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("EndWorkingAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset EndWorkingAt { get; set; }

    /// <summary>
    /// User's probation.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Probation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
    public System.DateTimeOffset Probation { get; set; }

    /// <summary>
    /// User's rate
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    public float Rate { get; set; }

    /// <summary>
    /// User company ID.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("CompanyId", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public System.Guid CompanyId { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CreateGenderRequest
  {
    /// <summary>
    /// Unique name of the gender.
    /// </summary>
    [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
    public string Name { get; set; }

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class FindResultResponseGenderInfo
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<GenderInfo> Body { get; set; } = new System.Collections.ObjectModel.Collection<GenderInfo>();

    [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Always)]
    public double TotalCount { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  /// <summary>
  /// Response object for action operations.
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class OperationResultResponseImagesResponse
  {
    [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.AllowNull)]
    public System.Collections.Generic.ICollection<ImageInfo> Body { get; set; }

    [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Always)]
    [System.ComponentModel.DataAnnotations.Required]
    public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

    [Newtonsoft.Json.JsonExtensionData]
    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    {
      get { return _additionalProperties; }
      set { _additionalProperties = value; }
    }

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum PatchUserDocumentOp
  {

    [System.Runtime.Serialization.EnumMember(Value = @"replace")]
    Replace = 0,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum PatchUserDocumentPath
  {

    [System.Runtime.Serialization.EnumMember(Value = @"/FirstName")]
    _FirstName = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"/LastName")]
    _LastName = 1,

    [System.Runtime.Serialization.EnumMember(Value = @"/MiddleName")]
    _MiddleName = 2,

    [System.Runtime.Serialization.EnumMember(Value = @"/IsAdmin")]
    _IsAdmin = 3,

    [System.Runtime.Serialization.EnumMember(Value = @"/DateOfBirth")]
    _DateOfBirth = 4,

    [System.Runtime.Serialization.EnumMember(Value = @"/GenderId")]
    _GenderId = 5,

    [System.Runtime.Serialization.EnumMember(Value = @"/About")]
    _About = 6,

    [System.Runtime.Serialization.EnumMember(Value = @"/BusinessHoursFromUtc")]
    _BusinessHoursFromUtc = 7,

    [System.Runtime.Serialization.EnumMember(Value = @"/BusinessHoursToUtc")]
    _BusinessHoursToUtc = 8,

    [System.Runtime.Serialization.EnumMember(Value = @"/Latitude")]
    _Latitude = 9,

    [System.Runtime.Serialization.EnumMember(Value = @"/Longitude")]
    _Longitude = 10,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum CommunicationPatchDocumentOp
  {

    [System.Runtime.Serialization.EnumMember(Value = @"replace")]
    Replace = 0,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public enum CommunicationPatchDocumentPath
  {

    [System.Runtime.Serialization.EnumMember(Value = @"/Type")]
    _Type = 0,

    [System.Runtime.Serialization.EnumMember(Value = @"/Value")]
    _Value = 1,

  }

  [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
  {
    public DateFormatConverter()
    {
      DateTimeFormat = "yyyy-MM-dd";
    }
  }



  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ApiException : System.Exception
  {
    public int StatusCode { get; private set; }

    public string Response { get; private set; }

    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    {
      StatusCode = statusCode;
      Response = response;
      Headers = headers;
    }

    public override string ToString()
    {
      return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    }
  }

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class ApiException<TResult> : ApiException
  {
    public TResult Result { get; private set; }

    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
        : base(message, statusCode, response, headers, innerException)
    {
      Result = result;
    }
  }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
